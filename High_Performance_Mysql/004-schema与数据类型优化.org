* Schema 与数据类型优化

良好的逻辑设计和物理设计是高性能的基石，应该根据系统要执行的查询语句来设计 schema，这往往需要权衡各种因素。例如：反范式的设计可以加快某些类型的查询，但同时可能会使另一种类型的查询变慢；比如添加计数表和汇总表是一种很好的优化查询的方式，但是这些表的维护成本可能会很高。

** 选择数据类型

*** 选择数据类型的几个原则

**** 最小的通常更好

更小的数据类型通常更快，因为它们占用更少的磁盘、内存和 CPU 缓存，并且处理时需要的 CPU 周期也更少。但是要确保没有低估需要存储的值的范围，因为在 schema 中的许多地方增加数据类型的范围是一个非常耗时和痛苦的操作。

**** 简单就好

简单数据类型的操作通常需要更少的 CPU 周期。例如：整数比字符操作代价更低。推荐使用 MYSQL 内建的类型而不是字符串类型来保存时间；应该用整型存储 IP 地址。

**** 尽量避免 NULL

如果查询中包含可能为 NULL 的列，对 MySQL 来说更难优化，因为可为 NULL 的列使得索引、索引统计和值比较都更复杂。可为 NULL 的列会使用更多的存储空间。当可为 NULL 的列被索引时，每个索引记录需要一个额外的字节。

通常把可为 NULL 的列改为 NOT NULL 带来的性能提升会比较小，没有必要优先进行优化。

InnoDB 使用单位的位（bit）来存储 NULL 值，所以对于稀疏数据有很好的空间效率，但这一点不适用于 MyISAM。

**** 选择数据类型时，第一步先确定合适的大类型，第二步选择具体的类型（长度，范围，精度等其他特性）。

*** 整数类型

整数类型有可选的 UNSIGNED 属性，合理利用可以有效节省空间。

MySQL 的整数计算一般使用 64 位的 BIGINT 整数，即使在 32 位环境也是如此。（一些聚合函数例外，它们使用 DECIMAL 或 DOUBLE 进行计算）。

MySQL 可以为整数类型指定宽度，如 INT(11)。这点不会限制值的合法范围，只是规定了 MySQL 的一些交互工具用来显示字符的个数。对于存储和计算来说，INT(1) 和 INT(20) 是相同的。

*** 实数类型

实数类型不只是为了存储小数部分，也可以使用 DECIMAL 来存储比 BIGINT 还大的整数。MySQL 既支持精确类型，也支持不精确类型。

在 MySQL 5.0 和更高的版本，DECIMAL 类型支持精确计算。因为 CPU 不支持对 DECIMAL 的直接计算，而 CPU 直接支持原生浮点计算，所以浮点运算明显更快。

浮点和 DECIMAL 类型都可以指定精度。对于 DECIMAL 列，可以指定小数点前后所允许的最大位数。MySQL 5.0 和更高版本将数字打包保存到一个二进制字符串中（每 4 个字节保存 9 个数字）。例如，DECIMAL(18,9) 共使用 9 个字节：整数部分 4 个字节，小数部分四个字节，小数点本身占一个字节。MySQL 5.0 和更高版本中的 DECIMAL 类型允许最多存储 65 个数字。

有多种方法可以指定浮点列所需要的精度，这会使得 MYSQL 悄悄选择不同的数据类型，或者在存储时对值进行取舍。这些精度是非标准的、所以建议只指定数据类型，不指定精度。

MySQL 使用 DOUBLE 作为内部浮点计算的类型。

要保证精度有两种办法：一种是使用 DECIMAL；另一种是将数字乘以 10 的倍数，然后保存到 BIGINT 中。

*** 字符串类型

从 MySQL 4.1 开始，每个字符串列都可以定义自己的字符集和排序规则。 

**** VARCHAR 和 CHAR 类型

VARCHAR 和 CHAR 在磁盘和内存中的存储方式与存储引擎的具体实现有关。注意：存储引擎存储 CHAR 或者 VARCHAR 的方式在内存中和在磁盘上可能不一样，所以 MySQL 服务器从存储引擎读出的值可能需要转换为另一种存储格式。

***** VARCHAR

VARCHAR 类型用于存储可变长字符串，它只使用必要的空间。但是如果 MySQL 表使用 ROW_FORMAT=FIXED 创建的话，每一行都会使用定长存储，这会很浪费空间。

VARCHAR 类型需要使用 1 到 2 个字节来记录字符串的长度：如果列的最大长度小于或等于 255 字节，就只需要一个字节来表示，否则使用 2 个字节。

VARCHAR 节省了存储空间，对性能有帮助。但是由于行是变长的，在 UPDATE 时可能变得比原先长，如果原先的空间无法容纳的话，就需要额外的工作。对于这点，不同的存储引擎的处理方式是不同的。

适合使用 VARCHAR 的场景：字符串列的最大长度比平均差高度大很多；列的更新很少，所以碎片不是问题；使用了像 UTF-8 这样复杂的字符集，每个字符都使用不同的字节数进行存储。

在 5.0 或者更高版本，MySQL 在存储和检索时会保留末尾空格。但是在 4.1 或更老的版本，MySQL 会剔除末尾空格。

但在查询字符串的时候，字符串尾部的空格不会影响 VARCHAR 和 CHAR 的查询。

InnoDB 更加灵活，它可以把过长的 VARCHAR 存储为 BLOB。

***** CHAR

CHAR 类型是定长的：MySQL 总是根据定义的字符串长度分配足够的空间。当存储 CHAR 值时，MySQL 会删除尾部的空格。CHAR 值会根据需要采用空格进行填充以方便比较。

CHAR 很适合存储很短的字符串，或者所有值都接近一个长度的字符串。对于经常变更的数据，CHAR 也比 VARCHAR 更好，因为定长的 CHAR 类型不容易产生碎片。对于非常短的列，CHAR 比 VARCHAR 在存储空间上也更有效率，比如 CHAR(1) 比 VARCHAR(1) 占用的空间小。

数据如何存储取决于存储引擎，并非所有的存储引擎都会按照相同的方式来处理定长和变长的字符串。不过填充和截取空格的行为在不同存储引擎都是一样的，因为这是在 MySQL 服务器层处理的。

与 CHAR 和 VARCHAR 类似的类型有 BINARY 和 VARBINARY，它们存储的是二进制字符串。二进制字符串存储的是字节码而不是字符。填充也不一样：MySQL 填充 BINARY 采用的是 \0 而不是空格，在检索时也不会去掉填充值。

二进制比较的有事并不仅仅体现在大小写敏感上。MySQL 比较 BINARY 字符串时，每次按一个字节，并且根据该字节的数值进行比较。因为二进制比较比字符比较（字符比较需要考虑字符排序规则）简单得多，所以也就更快。

VARCHAR(5) 和 VARCHAR(100) 在存储 'hello' 时消耗的磁盘空间是相同的，但是更长的列会消耗更多的内存，因为 MySQL 通常会分配固定大小的内存块来保存内部值。尤其是使用内存临时表进行排序或操作时会特别糟糕。在利用磁盘临时表进行排序时也同样糟糕。

**** BLOB 和 TEXT 类型

BLOB 和 TEXT 都是为了存储很大的数据而设计的字符串数据类型，分别采用二进制和字符方式存储。字符类型有：TINYTEXT、SMALLTEXT、TEXT、MEDIUMTEXT、LONGTEXT。对应的二进制类型由：TINYBLOB、SMALLBLOB、BLOB、MEDIUMBLOB、LONGBLOB。BLOB 是 SMALLBLOB 的同义词，TEXT 是 SMALLTEXT 的同义词。

与其他类型不同，MySQL 会把每个 BLOB 和 TEXT 值当做一个独立的对象处理。存储引擎在存储时通常会做特殊处理。当 BLOB 和 TEXT 值太大时，InnoDB 会使用专门的“外部”存储区域来进行存储，此时每个值在行内需要 1～4 个字节存储一个指针，然后在外部存储区域存储实际的值。

BLOB 和 TEXT 家族唯一的区别在于 BLOB 存储二进制数据，没有排序规则或字符集，而 TEXT 类型有字符集和排序规则。

MySQL 对 BLOB 和 TEXT 列进行排序和其他类型是不同的：它只对每个列的最前 max_sort_length 字节进行排序。如果只需要排序前面一小部分字符，则可以减少 max_sort_length 的配置，或者使用 ORDER BY SUBSTRING(column, length)。

MySQL 不能将 BLOB 和 TEXT 列全部长度的字符串进行索引，也不能使用这些索引消除排序。

如果 EXPLAIN 执行计划中的 Extra 列包含“Using Temporary”，则说明这个查询使用了隐式临时表。

**** 使用 ENUM 代替字符串类型

MySQL 在存储枚举时会非常紧凑，会根据列表值的数量压缩到一个或两个字节中。MySQL 在内部会将每个值在列表中的位置保存为整数，并且在表的 .frm 文件中保存“数字-字符串”映射关系的“查找表”。

枚举类型是按照内部存储的整数而不是定义的字符串进行排序的。一种绕过这种限制的方式是按照需要的顺序来定义枚举类。另外也可以在查询中使用 FIELD() 函数显示地指定排序规则，但这会导致 MySQL 无法使用索引消除排序。

枚举最不好的地方是，字符串列表是固定的，添加或删除字符串必须使用 ALTER TABLE。因此，对于一系列未来可能会改变的字符串，使用枚举不是一个好主意，除非能接受只在列表末尾添加元素，这样在 MySQL 5.1 中就可以不用重建整个表来完成修改。

由于 MySQL 把每个枚举值保存为整数，并且必须进行查找才能转换为字符串，所以枚举列有一些开销。通常枚举的列表都比较小，所以开销还可以控制，但也不能保证一直如此。在特定情况下，把 CHAR/VARCHAR 列与枚举列进行关联可能比直接关联 CHAR/VARCHAR 列还要慢。但是 ENUM 列消耗的空间小，关联也可能因为消耗的 I/O 少而提高效率。

*** 日期和时间类型

MySQL 提供了很多类型来保存日期和时间值，大部分时间类型都没有替代品，因此没有什么是最佳选择的问题。MySQL 提供了两种相似的日期类型：DATETIME 和 TIMESTAMP。

**** DATETIME

DATETIME 表示范围为 '1000-01-01 00:00:00'～'9999-12-31 23:59:59'，精度为秒，与时区无关。使用 8 个字节的存储空间。

**** TIMESTAMP

TIMESTAMP 占用四个字节，保存秒级时间戳，在查询出来的时候会根据连接的时区设置来转换成对应时区的字符串形式。时间戳表示的是 +0 时区(UTC时区)下，某一时时间点距 1970 年 1 月 1 日 0 时 0 分 0 秒的秒数，因为有四个字节的限制，并且保存格式不是非负数，所以表示范围为"1970-01-01 00:00:00 UTC" ～ "2038-01-19 03:14:07 UTC"（表示成整数是 0 ~ 2147483647）。

MySQL 服务器、操作系统，以及客户端连接都有时区设置。

TIMESTAMP 的行为规则比较复杂，并且在不同的 MySQL 版本里会变动，所以应该验证数据库的行为是你需要的。一种好的方式是修改完 TIMESTAMP 列后用 SHOW CREATE TABLE 命令检查输出。

*** 位数据类型

MySQL 有少数几种存储类型使用紧凑的位存储数据。所有这些位类型，不管底层存储格式和处理方式如何，从技术上来说都是字符串类型。

**** BIT

可以使用 BIT 列在一列中存储一个或多个 true/false 值。BIT(1) 定义一个包含单个位的字段，BIT(2) 存储两个位，依次类推。BIT 列的最大长度是 64 位。

BIT 的行为因存储引擎而异。MyISAM 会打包存储所有的 BIT 列，所以 17 个单独的 BIT 列只需要 17 个位存储（假设没有可为 NULL 的列），也就是总共占用三个字节。其他存储引擎比如 Memory 和 InnoDB，为每个 BIT 列使用一个足够存储的最小整数类型来存放，所以不能节省存储空间。

如果想在一个 bit 的存储空间存储一个 true/false 值，另一个方法是创建一个可以为空的 CHAR(0) 列。该列可以保存空值（NULL）或长度为零的字符串。

**** SET

如果需要保存很多 true/false 值，可以考虑合并这些列到一个 SET 数据类型，它在 MySQL 内部是以一系列打包的位的集合来表示的。有效地利用了存储空间，并且 MySQL 有 FIND_IN_SET() 和 FIELD() 函数，方便在查询中使用。它的主要缺点是改变列的定义的代价较高：需要 ALTER TABLE，对于大表来说比较耗时。一般来说，也无法在 SET 列上通过索引查找。

一种替代 SET 的方法是使用整数来包装一系列位，这种方法的好处在于可以不使用 ALTER TABLE 改变字段代表的“枚举”值，但是查询语句很难写，并且很难理解。

如果使用 SET 列，可以让 MySQL 在列定义里存储位到值的映射关系；如果使用整数列，需要在应用代码里存储这个对应关系。

CREATE TABLE acl(perms SET('CAN_READ', 'CAN_WRITE', 'CAN_DELETE') NOT NULL);
INSERT INTO acl(perms) VALUES ('CAN_READ,CAN_DELETE');
SELECT perms FROM acl WHERE FIND_IN_SET('CAN_READ', perms);

SET @CAN_READ := 1 <<0, @CAN_WRITE := 1 << 1, @CAN_DELETE := 1 << 2;
CREATE TABLE acl(perms TINYINT UNSIGNED NOT NULL DEFAULT 0);
INSERT INTO acl (perms) VALUES (@CAN_READ + @CAN_DELETE);
SELECT perms FROM acl WHERE perms & CAN_READ;

*** 选择标识符

一般来说，标识列更有可能与其他值进行比较，或者通过标识列寻找其他列。当选择标识列的类型时，不仅仅需要考虑存储类型，还需要考虑 MySQL 对这种类型怎么执行计算和比较。例如：MySQL 在内部使用整数存储 ENUM 和 SET 类型，然后在做比较操作时转换为字符串。

一旦选定了一种类型，要确保所有关联表中都使用相同的类型。类型之间需要精确匹配，包括像 UNSIGNED 这样的属性。混用不同数据类型可能导致性能问题，即使没有性能影响，在比较操作时隐式类型转换也可能导致很难发现的问题。

下面是一些小技巧：

1. 整数类型：整数类型通常是标识列最好的选择，因为它们很快并且可以使用 AUTO_INCREMENT。

2. ENUM 和 SET 类型：对于标识列来说，ENUM 和 SET 类型通常是一种糟糕的选择。ENUM 和 SET 列适合存储固定信息，例如有序的状态、产品类型、人的性别。

3. 字符串类型：如果可能，尽量避免使用字符串类型作为标识列，因为它们很消耗空间，并且通常比数字类型慢。尤其是在 MyISAM 表里使用 字符串作为标识列时要格外小心，MyISAM 默认对字符串使用压缩索引，这会导致查询慢很多。对于完全“随机”的字符串也需要多加注意，例如 MD5()，SHA1() 或者 UUID() 产生的字符串。这些函数生成的值会任意分布在很大的空间内，这会导致 INSERT 以及一些 SELECT 操作变得很慢（另一方面，对于一些有很多写的特别大的表，这种伪随机值实际上可以帮忙消除热点）。

   a. 因为插入值会随机写到索引的不同位置，所以使得 INSERT 语句更慢。这会导致页分裂、磁盘随机访问，以及对于聚簇索引引擎产生聚簇索引碎片。

   b. SELECT 语句会变得更慢，因为逻辑上相邻的行会分布在磁盘和内存的不同地方（比如同一天创建的用户）。

   c. 随机值导致缓存对所有类型的查询语句都很差，因为会使得缓存赖以工作的访问局部性原理失效。如果工作集比内存大，缓存将会有很多刷新和不命中。

如果要存储 UUID 值，应该移除 "-" 符号，更好的做法是用 UNHEX() 函数转换 UUID 值为 16 字节的数字，并且存储在一个 BINARY(16) 列中。检索时可以通过 HEX() 函数来格式化为十六进制格式。

UUID() 生成的值与加密散列函数生成的值有不同的特征：UUID 虽然分布也不均匀，但是还是有一定顺序的。

当心自动生成的 schema，工具自动生成的 schema 往往不是好的选择。

*** 特殊类型数据

某些类型的数据并不直接与内置类型一直。例如 IPv4 地址，表面上是一个最多 15 位的字符串，然而它实际上是一个 32 位无符号整数。MySQL 提供 INET_ATON() 和 INET_NTOA() 函数在这两种表示方法之间转换。

** MySQL schema 设计中的陷阱

1. 太多的列（上千行）

MySQL 的存储引擎 API 工作时需要在服务器层和存储引擎层之间通过行缓冲格式拷贝数据，然后在服务器层将缓冲内容解码成各个列。从行缓冲中将编码过的列转换成行数据结构的操作代价是非常高的。MyISAM 的定长行结构实际上与服务器层的行结构正好匹配，所以不需要转换。然而，MyISAM 的变长行结构和 InnoDB 的行结构总是需要转换。转换的代价依赖于行的数量。

2. 太多的关联

所谓的”实体-属性-值“（EAV）设计模式一种常见的糟糕设计模式，尤其是在 MySQL 下不能靠谱地工作。MySQL 限制了每个关联操作最多只能有 61 张表，不过实际上，在许多关联少于 61 张表的情况下，解析和优化查询的代价也会称为 MySQL 的问题。一个粗略的经验法则，如果希望查询执行得快速且并发性好，单个查询最多在 12 个表内做关联。

3. 全能地枚举

注意防止过度使用枚举。

3. 变相地枚举

ENUM 列允许在列中村组一组定义值中的单个值，SET 列允许在列中存储一组定义值中的一个或多个值，不要混用。

尽量避免列为 NULL，但是如果使用 NULL 更合理的话，也不要刻意不用。比如日期默认值为一个无意义的值，不如默认值为 NULL。可以配置 MySQL 的 SQL_MODE 来禁止不可能的日期。MySQL 会在索引中存储 NULL 值，而 Oracle 则不会。

** 范式与反范式

